// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=consumer_mock.go -package=kafkaconsumer -source interface.go
//

// Package kafkaconsumer is a generated GoMock package.
package kafkaconsumer

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockIMessage is a mock of IMessage interface.
type MockIMessage struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageMockRecorder
}

// MockIMessageMockRecorder is the mock recorder for MockIMessage.
type MockIMessageMockRecorder struct {
	mock *MockIMessage
}

// NewMockIMessage creates a new mock instance.
func NewMockIMessage(ctrl *gomock.Controller) *MockIMessage {
	mock := &MockIMessage{ctrl: ctrl}
	mock.recorder = &MockIMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessage) EXPECT() *MockIMessageMockRecorder {
	return m.recorder
}

// BlockTimestamp mocks base method.
func (m *MockIMessage) BlockTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// BlockTimestamp indicates an expected call of BlockTimestamp.
func (mr *MockIMessageMockRecorder) BlockTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockTimestamp", reflect.TypeOf((*MockIMessage)(nil).BlockTimestamp))
}

// Context mocks base method.
func (m *MockIMessage) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockIMessageMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockIMessage)(nil).Context))
}

// GenerationID mocks base method.
func (m *MockIMessage) GenerationID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerationID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GenerationID indicates an expected call of GenerationID.
func (mr *MockIMessageMockRecorder) GenerationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerationID", reflect.TypeOf((*MockIMessage)(nil).GenerationID))
}

// Headers mocks base method.
func (m *MockIMessage) Headers() []RecordHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].([]RecordHeader)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockIMessageMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockIMessage)(nil).Headers))
}

// Key mocks base method.
func (m *MockIMessage) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockIMessageMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIMessage)(nil).Key))
}

// Lag mocks base method.
func (m *MockIMessage) Lag() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lag")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Lag indicates an expected call of Lag.
func (mr *MockIMessageMockRecorder) Lag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lag", reflect.TypeOf((*MockIMessage)(nil).Lag))
}

// MemberID mocks base method.
func (m *MockIMessage) MemberID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberID")
	ret0, _ := ret[0].(string)
	return ret0
}

// MemberID indicates an expected call of MemberID.
func (mr *MockIMessageMockRecorder) MemberID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberID", reflect.TypeOf((*MockIMessage)(nil).MemberID))
}

// Offset mocks base method.
func (m *MockIMessage) Offset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockIMessageMockRecorder) Offset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockIMessage)(nil).Offset))
}

// Partition mocks base method.
func (m *MockIMessage) Partition() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partition")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Partition indicates an expected call of Partition.
func (mr *MockIMessageMockRecorder) Partition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*MockIMessage)(nil).Partition))
}

// ReadInJSON mocks base method.
func (m *MockIMessage) ReadInJSON(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInJSON indicates an expected call of ReadInJSON.
func (mr *MockIMessageMockRecorder) ReadInJSON(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInJSON", reflect.TypeOf((*MockIMessage)(nil).ReadInJSON), arg0)
}

// ReadInProto mocks base method.
func (m *MockIMessage) ReadInProto(arg0 protoreflect.ProtoMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInProto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInProto indicates an expected call of ReadInProto.
func (mr *MockIMessageMockRecorder) ReadInProto(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInProto", reflect.TypeOf((*MockIMessage)(nil).ReadInProto), arg0)
}

// Timestamp mocks base method.
func (m *MockIMessage) Timestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *MockIMessageMockRecorder) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockIMessage)(nil).Timestamp))
}

// Topic mocks base method.
func (m *MockIMessage) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockIMessageMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockIMessage)(nil).Topic))
}

// Value mocks base method.
func (m *MockIMessage) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIMessageMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIMessage)(nil).Value))
}

// MockIConsumeProcessor is a mock of IConsumeProcessor interface.
type MockIConsumeProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockIConsumeProcessorMockRecorder
}

// MockIConsumeProcessorMockRecorder is the mock recorder for MockIConsumeProcessor.
type MockIConsumeProcessorMockRecorder struct {
	mock *MockIConsumeProcessor
}

// NewMockIConsumeProcessor creates a new mock instance.
func NewMockIConsumeProcessor(ctrl *gomock.Controller) *MockIConsumeProcessor {
	mock := &MockIConsumeProcessor{ctrl: ctrl}
	mock.recorder = &MockIConsumeProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsumeProcessor) EXPECT() *MockIConsumeProcessorMockRecorder {
	return m.recorder
}

// ConsumeKafkaMessages mocks base method.
func (m *MockIConsumeProcessor) ConsumeKafkaMessages(ctx context.Context, topic string, partition int32, msgs []IMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeKafkaMessages", ctx, topic, partition, msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeKafkaMessages indicates an expected call of ConsumeKafkaMessages.
func (mr *MockIConsumeProcessorMockRecorder) ConsumeKafkaMessages(ctx, topic, partition, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeKafkaMessages", reflect.TypeOf((*MockIConsumeProcessor)(nil).ConsumeKafkaMessages), ctx, topic, partition, msgs)
}

// ConsumeProcessorName mocks base method.
func (m *MockIConsumeProcessor) ConsumeProcessorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeProcessorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConsumeProcessorName indicates an expected call of ConsumeProcessorName.
func (mr *MockIConsumeProcessorMockRecorder) ConsumeProcessorName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeProcessorName", reflect.TypeOf((*MockIConsumeProcessor)(nil).ConsumeProcessorName))
}

// ConsumeProcessorStop mocks base method.
func (m *MockIConsumeProcessor) ConsumeProcessorStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumeProcessorStop")
}

// ConsumeProcessorStop indicates an expected call of ConsumeProcessorStop.
func (mr *MockIConsumeProcessorMockRecorder) ConsumeProcessorStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeProcessorStop", reflect.TypeOf((*MockIConsumeProcessor)(nil).ConsumeProcessorStop))
}

// MockITelemetry is a mock of ITelemetry interface.
type MockITelemetry struct {
	ctrl     *gomock.Controller
	recorder *MockITelemetryMockRecorder
}

// MockITelemetryMockRecorder is the mock recorder for MockITelemetry.
type MockITelemetryMockRecorder struct {
	mock *MockITelemetry
}

// NewMockITelemetry creates a new mock instance.
func NewMockITelemetry(ctrl *gomock.Controller) *MockITelemetry {
	mock := &MockITelemetry{ctrl: ctrl}
	mock.recorder = &MockITelemetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITelemetry) EXPECT() *MockITelemetryMockRecorder {
	return m.recorder
}

// CollectLag mocks base method.
func (m *MockITelemetry) CollectLag(ctx context.Context, serviceName string, consumerType TextConsumerType, topic string, partition int32, clientID, groupID string, lag int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectLag", ctx, serviceName, consumerType, topic, partition, clientID, groupID, lag)
}

// CollectLag indicates an expected call of CollectLag.
func (mr *MockITelemetryMockRecorder) CollectLag(ctx, serviceName, consumerType, topic, partition, clientID, groupID, lag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectLag", reflect.TypeOf((*MockITelemetry)(nil).CollectLag), ctx, serviceName, consumerType, topic, partition, clientID, groupID, lag)
}

// CollectMessageProcessingRetry mocks base method.
func (m *MockITelemetry) CollectMessageProcessingRetry(ctx context.Context, serviceName string, consumerType TextConsumerType, topic string, partition int32, clientID, groupID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectMessageProcessingRetry", ctx, serviceName, consumerType, topic, partition, clientID, groupID)
}

// CollectMessageProcessingRetry indicates an expected call of CollectMessageProcessingRetry.
func (mr *MockITelemetryMockRecorder) CollectMessageProcessingRetry(ctx, serviceName, consumerType, topic, partition, clientID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMessageProcessingRetry", reflect.TypeOf((*MockITelemetry)(nil).CollectMessageProcessingRetry), ctx, serviceName, consumerType, topic, partition, clientID, groupID)
}

// CollectMessageProcessingTime mocks base method.
func (m *MockITelemetry) CollectMessageProcessingTime(ctx context.Context, serviceName string, consumerType TextConsumerType, duration time.Duration, topic string, partition int32, clientID, groupID string, success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectMessageProcessingTime", ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success)
}

// CollectMessageProcessingTime indicates an expected call of CollectMessageProcessingTime.
func (mr *MockITelemetryMockRecorder) CollectMessageProcessingTime(ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMessageProcessingTime", reflect.TypeOf((*MockITelemetry)(nil).CollectMessageProcessingTime), ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success)
}

// CollectMessageProcessingTimeBeforeProcess mocks base method.
func (m *MockITelemetry) CollectMessageProcessingTimeBeforeProcess(ctx context.Context, serviceName string, consumerType TextConsumerType, duration time.Duration, topic string, partition int32, clientID, groupID string, success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectMessageProcessingTimeBeforeProcess", ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success)
}

// CollectMessageProcessingTimeBeforeProcess indicates an expected call of CollectMessageProcessingTimeBeforeProcess.
func (mr *MockITelemetryMockRecorder) CollectMessageProcessingTimeBeforeProcess(ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMessageProcessingTimeBeforeProcess", reflect.TypeOf((*MockITelemetry)(nil).CollectMessageProcessingTimeBeforeProcess), ctx, serviceName, consumerType, duration, topic, partition, clientID, groupID, success)
}

// CollectReadSize mocks base method.
func (m *MockITelemetry) CollectReadSize(ctx context.Context, serviceName string, consumerType TextConsumerType, size int, topic string, partition int32, clientID, groupID string, success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectReadSize", ctx, serviceName, consumerType, size, topic, partition, clientID, groupID, success)
}

// CollectReadSize indicates an expected call of CollectReadSize.
func (mr *MockITelemetryMockRecorder) CollectReadSize(ctx, serviceName, consumerType, size, topic, partition, clientID, groupID, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectReadSize", reflect.TypeOf((*MockITelemetry)(nil).CollectReadSize), ctx, serviceName, consumerType, size, topic, partition, clientID, groupID, success)
}

// MockIErrorLogger is a mock of IErrorLogger interface.
type MockIErrorLogger struct {
	ctrl     *gomock.Controller
	recorder *MockIErrorLoggerMockRecorder
}

// MockIErrorLoggerMockRecorder is the mock recorder for MockIErrorLogger.
type MockIErrorLoggerMockRecorder struct {
	mock *MockIErrorLogger
}

// NewMockIErrorLogger creates a new mock instance.
func NewMockIErrorLogger(ctrl *gomock.Controller) *MockIErrorLogger {
	mock := &MockIErrorLogger{ctrl: ctrl}
	mock.recorder = &MockIErrorLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIErrorLogger) EXPECT() *MockIErrorLoggerMockRecorder {
	return m.recorder
}

// LogError mocks base method.
func (m *MockIErrorLogger) LogError(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", ctx, err)
}

// LogError indicates an expected call of LogError.
func (mr *MockIErrorLoggerMockRecorder) LogError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockIErrorLogger)(nil).LogError), ctx, err)
}
